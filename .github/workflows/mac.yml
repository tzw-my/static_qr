# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
#   # This workflow contains a single job called "build"
#   test:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2

#       # Runs a set of commands using the runners shell
#       - name: Download dependencies
#         run: |
#           sudo apt-get install tar
#           sudo apt-get install p7zip
#           if go version;then
#             sudo rm -rf "$(command -v go)"
#             sudo rm -rf /usr/local/go
#           fi
#           wget -c https://dl.google.com/go/go1.18.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local
#           export PATH=$PATH:/usr/local/go/bin
#           printf "%s" "PATH=$PATH:/usr/local/go/bin">>$HOME/.profile
#           source ~/.profile
#           sudo cp -r /usr/local/go/bin/* /usr/bin
#           go version
          
  # This workflow contains a single job called "build"
  Download:
    # The type of runner that the job will run on
    runs-on: windows-2022
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: container
        run: |
          choco install mingw
          choco install make
          choco install wget
          wget https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.5.2.tar.gz
          tar zxvf libressl-3.5.2.tar.gz
          cd libressl && {
            ./config no-shared LDFLAGS="-static"
            make
            make install
          }
          wget https://www.zlib.net/zlib-1.2.12.tar.gz
          tar zxvf zlib-1.2.12.tar.gz 
          cd zlib && {
            ./configure --static
            make
            make install
          }
          wget https://github.com/libssh2/libssh2/archive/refs/tags/libssh2-1.10.0.tar.gz
          tar zxvf libssh2-1.10.0.tar.gz 
          cd libssh2 && {
            LDFLAGS="-static" CFLAGS="-DHAVE_OPAQUE_STRUCTS=1 "   ./configure
            make
            make install
          }
          https://github.com/curl/curl/archive/refs/tags/curl-7_83_1.tar.gz
          tar zxvf curl-7_83_1.tar.gz
          cd curl-7_83_1 && {
            autoreconf -fi
            LDFLAGS="-static" PKG_CONFIG="pkg-config --static" ./configure --with-zlib --with-openssl --prefix=/home/curl
            make -j4 LDFLAGS="-static -all-static"
            make install
          }

          